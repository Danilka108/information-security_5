using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using DynamicData;using ReactiveUI;namespace InformationSecurity.ViewModels;public class MainWindowViewModel : ViewModelBase{    private string _key;    private string _message;    private string _pathToFile;    private int _selectedFileKindIndex;    private int _selectedDataKindIndex;    private string _result;    private string _binResult;    private string _hexResult;    private string _errorMessage;    public MainWindowViewModel()    {        var c = ConvertToHexBytes("123");                var t = c.Select((t, i) => (byte)(t ^ 1)).ToArray();        var t2 = t.Select((t, i) => (byte)(t ^ 1)).ToArray();        // var d = string.Join("", c.Select(b => Convert.ToString(b, 16)));    }        public string Key    {        get => _key;        set => this.RaiseAndSetIfChanged(ref _key, value);    }    public string Message    {        get => _message;        set => this.RaiseAndSetIfChanged(ref _message, value);    }    public string PathToFile    {        get => _pathToFile;        set => this.RaiseAndSetIfChanged(ref _pathToFile, value);    }    public int SelectedFileKindIndex    {        get => _selectedFileKindIndex;        set => this.RaiseAndSetIfChanged(ref _selectedFileKindIndex, value);    }    public int SelectedDataKindIndex    {        get => _selectedDataKindIndex;        set => this.RaiseAndSetIfChanged(ref _selectedDataKindIndex, value);    }    public string Result    {        get => _result;        set => this.RaiseAndSetIfChanged(ref _result, value);    }    public string BinResult    {        get => _binResult;        set => this.RaiseAndSetIfChanged(ref _binResult, value);    }    public string HexResult    {        get => _hexResult;        set => this.RaiseAndSetIfChanged(ref _hexResult, value);    }    public string ErrorMessage    {        get => _errorMessage;        set => this.RaiseAndSetIfChanged(ref _errorMessage, value);    }    public bool IsErrorMessageExists    {        get        {            if (ErrorMessage is { } e) return e.Length != 0;            return false;        }    }    public void ReadFromFile()    {        try        {            if (_selectedFileKindIndex == 0) Key = File.ReadAllText(_pathToFile);            if (_selectedFileKindIndex == 1) Message = File.ReadAllText(_pathToFile);        }        catch (Exception e)        {            ErrorMessage = $"Ошибка чтения из файла: {e.Message}";        }    }    public void EncryptOrDecrypt()    {        try        {            TryEncryptOrDecrypt();        }        catch (Exception e)        {            ErrorMessage = $"Ошибка шифрования/дешифрования: {e.Message}";        }    }    private byte[] ConvertToHexBytes(string str)    {        return str.SelectMany(c => Convert.FromHexString($"0{c}")).ToArray();    }    private void TryEncryptOrDecrypt()    {        var parsedKey = SelectedDataKindIndex == 0            ? ConvertToHexBytes(Key)            : Encoding.Default.GetBytes(Key);        var parsedMessage = SelectedDataKindIndex == 0            ? ConvertToHexBytes(Message)            : Encoding.Default.GetBytes(Message);        var newMessage = parsedMessage            .Select((t, i) => (byte)(t ^ parsedKey[i % parsedKey.Length])).ToArray();        BinResult = string.Join("", newMessage.Select(b => Convert.ToString(b, 2)));        HexResult = string.Join("", newMessage.Select(b => Convert.ToString(b, 16)));        Result = string.Join("", Encoding.Default.GetString(newMessage));    }}