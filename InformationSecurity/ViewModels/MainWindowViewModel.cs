using System;using System.Buffers.Text;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using DynamicData;using ReactiveUI;namespace InformationSecurity.ViewModels{    public class MainWindowViewModel : ViewModelBase    {        private string _key;        private string _message;        private string _pathToFile;        private int _selectedIndexComboBox;        private int _selectedDataKindIndex;        private string _resultMessage;        private string _binaryResultMessage;        public string Key        {            get => _key;            set => this.RaiseAndSetIfChanged(ref _key, value);        }                public string Message        {            get => _message;            set => this.RaiseAndSetIfChanged(ref _message, value);        }                public string PathToFile        {            get => _pathToFile;            set => this.RaiseAndSetIfChanged(ref _pathToFile, value);        }                public int SelectedIndexComboBox        {            get => _selectedIndexComboBox;            set => this.RaiseAndSetIfChanged(ref _selectedIndexComboBox, value);        }        public int SelectedDataKindIndex        {            get => _selectedDataKindIndex;            set => this.RaiseAndSetIfChanged(ref _selectedDataKindIndex, value);        }        public string ResultMessage        {            get => _resultMessage;            set => this.RaiseAndSetIfChanged(ref _resultMessage, value);        }        public void ReadFromFile()        {            try            {                if (_selectedIndexComboBox == 0) Key = File.ReadAllText(_pathToFile);                if (_selectedIndexComboBox == 1) Message = File.ReadAllText(_pathToFile);            }            catch (Exception)            {                var message = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Ошибка", "Ошибка открытия файла");                message.Show();            }        }        public void Encrypt()        {            try            {                TryEncryptOrDecrypt();            }            catch            {                var message = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Ошибка", "Не удалось зашифровать сообщение");                message.Show();            }        }                public void Decrypt()        {            try            {                ResultMessage = "";                TryEncryptOrDecrypt();            }            catch            {                var message = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Ошибка", "Не удалось расшифровать сообщение");                message.Show();            }        }                private void TryEncryptOrDecrypt()        {            var parsedKey = SelectedDataKindIndex == 0                ? Convert.FromHexString(Key)                : Encoding.Default.GetBytes(Key);            var parsedMessage = SelectedDataKindIndex == 0                ? Convert.FromHexString(Message)                : Encoding.Default.GetBytes(Message);            var newMessage = parsedMessage                .Select((t, i) => (byte)(t ^ parsedKey[i % parsedKey.Length])).ToArray();            var binaryStrings = newMessage.Select(b => Convert.ToString(b, 2));            _binaryResultMessage = string.Join("", binaryStrings);                        ResultMessage = SelectedDataKindIndex == 0                ? Convert.ToHexString(newMessage.ToArray())                : Encoding.Default.GetString(newMessage.ToArray());        }        public void ShowAsBinary()        {                var message = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Бинарный вид", _binaryResultMessage);                message.Show();        }    }}